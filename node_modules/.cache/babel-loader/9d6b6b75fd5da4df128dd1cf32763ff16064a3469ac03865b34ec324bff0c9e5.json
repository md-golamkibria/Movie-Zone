{"ast":null,"code":"// Simple hash function (in a real app, use proper bcrypt or similar)\nconst hashPassword=password=>{return btoa(password);// Base64 encoding (NOT secure for production)\n};// Helper functions to manage localStorage\nconst getUsers=()=>{try{return JSON.parse(localStorage.getItem('movietime_users')||'[]');}catch(error){console.error('Error parsing users from localStorage:',error);return[];}};const saveUsers=users=>{try{localStorage.setItem('movietime_users',JSON.stringify(users));}catch(error){console.error('Error saving users to localStorage:',error);throw new Error('Failed to save user data');}};export const authService={// Check if username is unique\nisUsernameAvailable:username=>{if(!username||typeof username!=='string'){return false;}const users=getUsers();return!users.find(user=>user.username.toLowerCase()===username.toLowerCase());},// Sign up new user\nsignUp:(username,password)=>{return new Promise((resolve,reject)=>{setTimeout(()=>{// Simulate API delay\nif(!username||!password){reject({message:'Username and password are required'});return;}if(typeof username!=='string'||typeof password!=='string'){reject({message:'Username and password must be valid strings'});return;}if(username.trim().length<3){reject({message:'Username must be at least 3 characters long'});return;}if(password.length<6){reject({message:'Password must be at least 6 characters long'});return;}const trimmedUsername=username.trim();if(!authService.isUsernameAvailable(trimmedUsername)){reject({message:'Username already exists'});return;}const users=getUsers();const newUser={id:Date.now(),username:trimmedUsername,password:hashPassword(password),createdAt:new Date().toISOString()};users.push(newUser);saveUsers(users);resolve({success:true,user:{id:newUser.id,username:newUser.username},message:'Account created successfully'});},500);});},// Sign in existing user\nsignIn:(username,password)=>{return new Promise((resolve,reject)=>{setTimeout(()=>{// Simulate API delay\nif(!username||!password){reject({message:'Username and password are required'});return;}if(typeof username!=='string'||typeof password!=='string'){reject({message:'Username and password must be valid strings'});return;}const trimmedUsername=username.trim();const users=getUsers();const user=users.find(user=>user.username.toLowerCase()===trimmedUsername.toLowerCase()&&user.password===hashPassword(password));if(user){// Set current user session\nlocalStorage.setItem('movietime_current_user',JSON.stringify({id:user.id,username:user.username}));resolve({success:true,user:{id:user.id,username:user.username},message:'Signed in successfully'});}else{reject({message:'Invalid username or password'});}},500);});},// Get current user session\ngetCurrentUser:()=>{try{const currentUser=localStorage.getItem('movietime_current_user');return currentUser?JSON.parse(currentUser):null;}catch(error){console.error('Error parsing current user from localStorage:',error);localStorage.removeItem('movietime_current_user');return null;}},// Sign out\nsignOut:()=>{localStorage.removeItem('movietime_current_user');}};","map":{"version":3,"names":["hashPassword","password","btoa","getUsers","JSON","parse","localStorage","getItem","error","console","saveUsers","users","setItem","stringify","Error","authService","isUsernameAvailable","username","find","user","toLowerCase","signUp","Promise","resolve","reject","setTimeout","message","trim","length","trimmedUsername","newUser","id","Date","now","createdAt","toISOString","push","success","signIn","getCurrentUser","currentUser","removeItem","signOut"],"sources":["/Users/apple/Desktop/Movie_Zone/src/services/authService.js"],"sourcesContent":["// Simple hash function (in a real app, use proper bcrypt or similar)\nconst hashPassword = (password) => {\n  return btoa(password); // Base64 encoding (NOT secure for production)\n};\n\n// Helper functions to manage localStorage\nconst getUsers = () => {\n  try {\n    return JSON.parse(localStorage.getItem('movietime_users') || '[]');\n  } catch (error) {\n    console.error('Error parsing users from localStorage:', error);\n    return [];\n  }\n};\n\nconst saveUsers = (users) => {\n  try {\n    localStorage.setItem('movietime_users', JSON.stringify(users));\n  } catch (error) {\n    console.error('Error saving users to localStorage:', error);\n    throw new Error('Failed to save user data');\n  }\n};\n\nexport const authService = {\n  // Check if username is unique\n  isUsernameAvailable: (username) => {\n    if (!username || typeof username !== 'string') {\n      return false;\n    }\n    const users = getUsers();\n    return !users.find(user => user.username.toLowerCase() === username.toLowerCase());\n  },\n\n  // Sign up new user\n  signUp: (username, password) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => { // Simulate API delay\n        if (!username || !password) {\n          reject({ message: 'Username and password are required' });\n          return;\n        }\n\n        if (typeof username !== 'string' || typeof password !== 'string') {\n          reject({ message: 'Username and password must be valid strings' });\n          return;\n        }\n\n        if (username.trim().length < 3) {\n          reject({ message: 'Username must be at least 3 characters long' });\n          return;\n        }\n\n        if (password.length < 6) {\n          reject({ message: 'Password must be at least 6 characters long' });\n          return;\n        }\n\n        const trimmedUsername = username.trim();\n\n        if (!authService.isUsernameAvailable(trimmedUsername)) {\n          reject({ message: 'Username already exists' });\n          return;\n        }\n\n        const users = getUsers();\n        const newUser = {\n          id: Date.now(),\n          username: trimmedUsername,\n          password: hashPassword(password),\n          createdAt: new Date().toISOString()\n        };\n\n        users.push(newUser);\n        saveUsers(users);\n\n        resolve({ \n          success: true, \n          user: { id: newUser.id, username: newUser.username },\n          message: 'Account created successfully' \n        });\n      }, 500);\n    });\n  },\n\n  // Sign in existing user\n  signIn: (username, password) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => { // Simulate API delay\n        if (!username || !password) {\n          reject({ message: 'Username and password are required' });\n          return;\n        }\n\n        if (typeof username !== 'string' || typeof password !== 'string') {\n          reject({ message: 'Username and password must be valid strings' });\n          return;\n        }\n\n        const trimmedUsername = username.trim();\n\n        const users = getUsers();\n        const user = users.find(user => \n          user.username.toLowerCase() === trimmedUsername.toLowerCase() && \n          user.password === hashPassword(password)\n        );\n\n        if (user) {\n          // Set current user session\n          localStorage.setItem('movietime_current_user', JSON.stringify({\n            id: user.id,\n            username: user.username\n          }));\n\n          resolve({ \n            success: true, \n            user: { id: user.id, username: user.username },\n            message: 'Signed in successfully' \n          });\n        } else {\n          reject({ message: 'Invalid username or password' });\n        }\n      }, 500);\n    });\n  },\n\n  // Get current user session\n  getCurrentUser: () => {\n    try {\n      const currentUser = localStorage.getItem('movietime_current_user');\n      return currentUser ? JSON.parse(currentUser) : null;\n    } catch (error) {\n      console.error('Error parsing current user from localStorage:', error);\n      localStorage.removeItem('movietime_current_user');\n      return null;\n    }\n  },\n\n  // Sign out\n  signOut: () => {\n    localStorage.removeItem('movietime_current_user');\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}