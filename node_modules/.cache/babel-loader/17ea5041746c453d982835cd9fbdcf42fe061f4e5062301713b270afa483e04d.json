{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import{BrowserRouter as Router,Routes,Route,Link}from\"react-router-dom\";import LightRays from\"./LightRays\";import\"./App.css\";import MovieTemplate from\"./MovieTemplate\";import WishlistPage from\"./WishlistPage\";import MovieDetailPage from\"./MovieDetailPage\";// Import the new component\nimport Auth from\"./components/Auth\";import{authService}from\"./services/authService\";import TextPressure from\"./TextPressure\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const TMDB_API_KEY=\"397abbabeb0c47f060cf654d072c0c15\";const TMDB_BASE_URL=\"https://api.themoviedb.org/3\";const App=()=>{const[wishlist,setWishlist]=useState([]);const[movies,setMovies]=useState([]);const[searchQuery,setSearchQuery]=useState(\"\");const[showRecent,setShowRecent]=useState(false);const[filters,setFilters]=useState({actorDirector:\"\",year:\"\",genre:\"\",ratings:\"\"});const[genresList,setGenresList]=useState([]);const[suggestedMovies,setSuggestedMovies]=useState([]);const[loading,setLoading]=useState(false);const[error,setError]=useState(null);const[currentUser,setCurrentUser]=useState(null);const[isCheckingAuth,setIsCheckingAuth]=useState(true);// Check authentication status on mount\nuseEffect(()=>{const existingUser=authService.getCurrentUser();setCurrentUser(existingUser);setIsCheckingAuth(false);},[]);// Fetch genres list first, then popular movies\nuseEffect(()=>{fetchGenresList();},[]);// Fetch popular movies when genres are loaded\nuseEffect(()=>{if(genresList.length>0){fetchPopularMovies();}},[genresList]);useEffect(()=>{if(showRecent&&genresList.length>0){fetchPopularMovies();}},[showRecent]);// Fetch genres list from TMDB\nconst fetchGenresList=async()=>{try{const response=await fetch(`${TMDB_BASE_URL}/genre/movie/list?api_key=${TMDB_API_KEY}&language=en-US`);const data=await response.json();if(data.genres){setGenresList(data.genres);}}catch(err){console.error(\"Error fetching genres list:\",err);}};// Fetch movies filtered by server-side filters\nconst fetchFilteredMovies=async filters=>{setLoading(true);setError(null);try{let actorDirectorId=null;if(filters.actorDirector.trim()!==\"\"){// Search person by name to get ID\nconst personResponse=await fetch(`${TMDB_BASE_URL}/search/person?api_key=${TMDB_API_KEY}&language=en-US&query=${encodeURIComponent(filters.actorDirector.trim())}&page=1&include_adult=false`);const personData=await personResponse.json();if(personData.results&&personData.results.length>0){actorDirectorId=personData.results[0].id;}else{setError(\"No actor/director found with that name.\");setSuggestedMovies([]);setLoading(false);return;}}// Map genre name to genre ID\nlet genreId=null;if(filters.genre.trim()!==\"\"){const genreObj=genresList.find(g=>g.name.toLowerCase()===filters.genre.trim().toLowerCase());if(genreObj){genreId=genreObj.id;}else{setError(\"Genre not found.\");setSuggestedMovies([]);setLoading(false);return;}}// Build query parameters\nconst params=new URLSearchParams();params.append(\"api_key\",TMDB_API_KEY);params.append(\"language\",\"en-US\");params.append(\"page\",\"1\");if(filters.year.trim()!==\"\"){params.append(\"primary_release_year\",filters.year.trim());}if(genreId){params.append(\"with_genres\",genreId);}if(actorDirectorId){params.append(\"with_cast\",actorDirectorId);}// Fetch movies with filters\nconst url=`${TMDB_BASE_URL}/discover/movie?${params.toString()}`;console.log(\"Fetching movies with URL:\",url);const response=await fetch(url);const data=await response.json();console.log(\"Filtered movies response:\",data);if(data.results){// Map genre_ids to genres array with names\nconst moviesWithGenres=data.results.map(movie=>{if(movie.genre_ids&&genresList.length>0){const genres=movie.genre_ids.map(id=>genresList.find(g=>g.id===id)).filter(Boolean);return{...movie,genres};}return movie;});// Filter by ratings client-side if needed\nlet filteredMovies=moviesWithGenres;if(filters.ratings.trim()!==\"\"){const ratingNum=parseFloat(filters.ratings);if(!isNaN(ratingNum)){filteredMovies=filteredMovies.filter(movie=>movie.vote_average&&movie.vote_average>=ratingNum);}}// Fetch credits for each movie to get director info\nconst moviesWithCredits=await Promise.all(filteredMovies.map(async movie=>{const credits=await fetchMovieCredits(movie.id);return{...movie,credits};}));setSuggestedMovies(moviesWithCredits);}else{setError(\"No movies found with the given filters.\");setSuggestedMovies([]);}}catch(err){console.error(\"Error fetching filtered movies:\",err);setError(\"Error fetching filtered movies.\");setSuggestedMovies([]);}setLoading(false);};// Fetch popular movies from TMDB\nconst fetchPopularMovies=async()=>{setLoading(true);setError(null);try{console.log('Fetching popular movies with genres list:',genresList.length);const response=await fetch(`${TMDB_BASE_URL}/movie/popular?api_key=${TMDB_API_KEY}&language=en-US&page=1`);const data=await response.json();if(data.results){var _data$results$;console.log('First movie genre_ids:',(_data$results$=data.results[0])===null||_data$results$===void 0?void 0:_data$results$.genre_ids);// Map genre_ids to genres array with names\nconst moviesWithGenres=data.results.map(movie=>{if(movie.genre_ids&&genresList.length>0){const genres=movie.genre_ids.map(id=>genresList.find(g=>g.id===id)).filter(Boolean);console.log(`Movie ${movie.title} genres:`,genres);return{...movie,genres};}console.log(`Movie ${movie.title} - no genres mapped`);return movie;});// Fetch credits for each movie to get director info\nconst moviesWithCredits=await Promise.all(moviesWithGenres.map(async movie=>{const credits=await fetchMovieCredits(movie.id);return{...movie,credits};}));setMovies(moviesWithCredits);setSuggestedMovies(moviesWithCredits);}else{setError(\"Failed to fetch popular movies.\");}}catch(err){setError(\"Error fetching popular movies.\");}setLoading(false);};// Fetch movie credits (cast and crew) by movie ID\nconst fetchMovieCredits=async movieId=>{try{const response=await fetch(`${TMDB_BASE_URL}/movie/${movieId}/credits?api_key=${TMDB_API_KEY}`);const data=await response.json();return data;}catch{return null;}};// Search movies by name using TMDB search API\nconst searchMovies=async query=>{if(!query){setSuggestedMovies([]);return;}setLoading(true);setError(null);try{const response=await fetch(`${TMDB_BASE_URL}/search/movie?api_key=${TMDB_API_KEY}&language=en-US&query=${encodeURIComponent(query)}&page=1&include_adult=false`);const data=await response.json();if(data.results){// Map genre_ids to genres array with names\nconst moviesWithGenres=data.results.map(movie=>{if(movie.genre_ids&&genresList.length>0){const genres=movie.genre_ids.map(id=>genresList.find(g=>g.id===id)).filter(Boolean);return{...movie,genres};}return movie;});// Fetch credits for each movie\nconst moviesWithCredits=await Promise.all(moviesWithGenres.map(async movie=>{const credits=await fetchMovieCredits(movie.id);return{...movie,credits};}));setSuggestedMovies(moviesWithCredits);}else{setError(\"No movies found.\");setSuggestedMovies([]);}}catch(err){setError(\"Error searching movies.\");setSuggestedMovies([]);}setLoading(false);};// Handle search by movie name\nconst handleSearch=()=>{setShowRecent(false);searchMovies(searchQuery);};// Handle Recent button toggle\nconst handleRecent=()=>{setSearchQuery(\"\");setFilters({actorDirector:\"\",year:\"\",genre:\"\",ratings:\"\"});setShowRecent(true);};// Handle input change for filters\nconst handleFilterChange=e=>{const{name,value}=e.target;console.log(`Filter input changed: ${name} = ${value}`);setFilters(prev=>({...prev,[name]:value}));};// Filter movies based on filters locally (since TMDB API does not support all filters directly)\nconst filterMovies=moviesList=>{let filtered=moviesList;if(filters.actorDirector.trim()!==\"\"){filtered=filtered.filter(movie=>{if(!movie.credits||!movie.credits.crew)return false;const directors=movie.credits.crew.filter(c=>c.job===\"Director\");return directors.some(d=>d.name.toLowerCase().includes(filters.actorDirector.toLowerCase()));});}if(filters.year.trim()!==\"\"){filtered=filtered.filter(movie=>{if(!movie.release_date)return false;return movie.release_date.startsWith(filters.year);});}if(filters.genre.trim()!==\"\"){filtered=filtered.filter(movie=>{if(!movie.genre_ids&&!movie.genres){// fallback to genres array if available\nif(movie.genres){return movie.genres.some(g=>g.name.toLowerCase().includes(filters.genre.toLowerCase()));}return false;}// genre_ids filtering is limited without genre mapping, so fallback to genres if available\nreturn false;});}if(filters.ratings.trim()!==\"\"){const ratingNum=parseFloat(filters.ratings);if(!isNaN(ratingNum)){filtered=filtered.filter(movie=>movie.vote_average&&movie.vote_average>=ratingNum);}}return filtered;};// Handle Give Suggestion button\nconst handleSuggestion=()=>{setShowRecent(false);// Filter from the original movies list to avoid cumulative filtering\nconst filtered=filterMovies(movies);setSuggestedMovies(filtered);};// Handle Enter key for search and suggestion inputs\nconst handleKeyDown=e=>{if(e.key===\"Enter\"){if(document.activeElement.name===\"search\"){handleSearch();}else{// Trigger server-side filtering on Enter in filter inputs\nsetShowRecent(false);fetchFilteredMovies(filters);}}};// Toggle wishlist function\nconst toggleWishlist=movie=>{console.log(\"Toggling wishlist for movie:\",movie.title);setWishlist(prev=>{const isInWishlist=prev.some(m=>m.id===movie.id);return isInWishlist?prev.filter(m=>m.id!==movie.id):[...prev,movie];});};// Handle successful authentication\nconst handleAuthSuccess=user=>{setCurrentUser(user);};// Handle logout\nconst handleLogout=()=>{authService.signOut();setCurrentUser(null);};// Show loading while checking authentication\nif(isCheckingAuth){return/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',justifyContent:'center',alignItems:'center',height:'100vh'},children:/*#__PURE__*/_jsx(\"p\",{children:\"Loading...\"})});}// Show Auth component if user is not authenticated\nif(!currentUser){return/*#__PURE__*/_jsxs(\"div\",{className:\"app-container\",children:[/*#__PURE__*/_jsx(LightRays,{raysOrigin:\"top-center\",raysColor:\"#00ffff\",raysSpeed:1.5,lightSpread:0.8,rayLength:1.2,followMouse:true,mouseInfluence:0.1,noiseAmount:0.1,distortion:0.05,className:\"background-rays\"}),/*#__PURE__*/_jsx(Auth,{onAuthSuccess:handleAuthSuccess})]});}return/*#__PURE__*/_jsx(Router,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"app-container\",children:[/*#__PURE__*/_jsx(LightRays,{raysOrigin:\"top-center\",raysColor:\"#00ffff\",raysSpeed:1.5,lightSpread:0.8,rayLength:1.2,followMouse:true,mouseInfluence:0.1,noiseAmount:0.1,distortion:0.05,className:\"background-rays\"}),/*#__PURE__*/_jsxs(\"header\",{className:\"header\",children:[/*#__PURE__*/_jsx(\"nav\",{className:\"nav-tabs\",style:{justifyContent:'flex-end'}}),/*#__PURE__*/_jsxs(\"div\",{style:{position:'absolute',top:'10px',right:'10px',display:'flex',alignItems:'center',gap:'15px',zIndex:1000},children:[/*#__PURE__*/_jsxs(\"span\",{style:{color:'white',fontWeight:'bold'},children:[\"Welcome, \",currentUser.username,\"!\"]}),/*#__PURE__*/_jsx(\"button\",{onClick:handleLogout,style:{padding:'10px 20px',fontWeight:'600',borderRadius:'8px',background:'linear-gradient(135deg, #00ffff, #0099cc)',border:'1px solid #00ffff',color:'#000000',cursor:'pointer',fontSize:'14px',fontFamily:'Inter, system-ui, sans-serif',boxShadow:'0 0 15px rgba(0, 255, 255, 0.4)',transition:'all 0.3s ease',transform:'translateY(0)',textTransform:'uppercase',letterSpacing:'0.5px'},onMouseEnter:e=>{e.target.style.transform='translateY(-2px)';e.target.style.boxShadow='0 0 25px rgba(0, 255, 255, 0.6)';e.target.style.background='linear-gradient(135deg, #00cccc, #007799)';},onMouseLeave:e=>{e.target.style.transform='translateY(0)';e.target.style.boxShadow='0 0 15px rgba(0, 255, 255, 0.4)';e.target.style.background='linear-gradient(135deg, #00ffff, #0099cc)';},children:\"\\uD83D\\uDEAA Logout\"})]}),/*#__PURE__*/_jsx(\"div\",{style:{position:'absolute',top:'10px',left:'10px'},children:/*#__PURE__*/_jsxs(Link,{to:\"/wishlist\",style:{padding:'10px 20px',fontWeight:'600',borderRadius:'8px',background:'rgba(0, 255, 255, 0.1)',border:'1px solid #00ffff',color:'#00ffff',textDecoration:'none',fontSize:'14px',fontFamily:'Inter, system-ui, sans-serif',boxShadow:'0 0 15px rgba(0, 255, 255, 0.3)',transition:'all 0.3s ease',transform:'translateY(0)',display:'inline-flex',alignItems:'center',gap:'6px',textTransform:'uppercase',letterSpacing:'0.5px',backdropFilter:'blur(10px)'},onMouseEnter:e=>{e.target.style.transform='translateY(-2px)';e.target.style.boxShadow='0 0 25px rgba(0, 255, 255, 0.5)';e.target.style.background='rgba(0, 255, 255, 0.2)';},onMouseLeave:e=>{e.target.style.transform='translateY(0)';e.target.style.boxShadow='0 0 15px rgba(0, 255, 255, 0.3)';e.target.style.background='rgba(0, 255, 255, 0.1)';},children:[\"\\u2764\\uFE0F Wishlist (\",wishlist.length,\")\"]})}),/*#__PURE__*/_jsx(\"div\",{style:{position:'absolute',top:'30px',left:'50%',transform:'translateX(-50%)',width:'400px',height:'50px',zIndex:999},children:/*#__PURE__*/_jsx(TextPressure,{text:\"MovieZone\",flex:true,alpha:false,stroke:false,width:true,weight:true,italic:true,textColor:\"#ffffff\",strokeColor:\"#ff0000\",minFontSize:36})}),/*#__PURE__*/_jsx(\"div\",{className:\"search-container\",style:{marginTop:'80px'},children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"search\",placeholder:\"Search by movie name...\",value:searchQuery,onChange:e=>setSearchQuery(e.target.value),onKeyDown:handleKeyDown,className:\"search-input\",autoComplete:\"off\"})})]}),/*#__PURE__*/_jsx(\"main\",{className:\"main-content\",children:/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"filters-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"filter-item\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"actorDirector\",children:\"Actor/Director:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"actorDirector\",name:\"actorDirector\",value:filters.actorDirector,onChange:handleFilterChange,onKeyDown:handleKeyDown,className:\"filter-input\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"filter-item\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"year\",children:\"Year:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",id:\"year\",name:\"year\",value:filters.year,onChange:handleFilterChange,onKeyDown:handleKeyDown,className:\"filter-input\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"filter-item\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"genre\",children:\"Genre:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"genre\",name:\"genre\",value:filters.genre,onChange:handleFilterChange,onKeyDown:handleKeyDown,className:\"filter-input\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"filter-item\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"ratings\",children:\"Ratings:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",id:\"ratings\",name:\"ratings\",min:\"1\",max:\"10\",step:\"0.1\",value:filters.ratings,onChange:handleFilterChange,onKeyDown:handleKeyDown,className:\"filter-input\"})]}),/*#__PURE__*/_jsx(\"button\",{className:\"suggestion-button\",onClick:()=>{setShowRecent(false);fetchFilteredMovies(filters);},children:\"Give Suggestion\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"movies-display\",children:loading?/*#__PURE__*/_jsx(\"p\",{children:\"Loading movies...\"}):error?/*#__PURE__*/_jsx(\"p\",{className:\"error-message\",children:error}):suggestedMovies.length>0?suggestedMovies.map(movie=>/*#__PURE__*/_jsx(MovieTemplate,{movie:movie,wishlist:wishlist,toggleWishlist:toggleWishlist},movie.id)):/*#__PURE__*/_jsx(\"p\",{className:\"no-results\",children:\"No movies to display.\"})})]})}),/*#__PURE__*/_jsx(Route,{path:\"/wishlist\",element:/*#__PURE__*/_jsx(WishlistPage,{wishlist:wishlist,toggleWishlist:toggleWishlist})}),/*#__PURE__*/_jsx(Route,{path:\"/movie/:movieId\",element:/*#__PURE__*/_jsx(MovieDetailPage,{})}),\" \",/*#__PURE__*/_jsx(Route,{path:\"/auth\",element:/*#__PURE__*/_jsx(Auth,{})})]})})]})});};export default App;","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","Link","LightRays","MovieTemplate","WishlistPage","MovieDetailPage","Auth","authService","TextPressure","jsx","_jsx","jsxs","_jsxs","TMDB_API_KEY","TMDB_BASE_URL","App","wishlist","setWishlist","movies","setMovies","searchQuery","setSearchQuery","showRecent","setShowRecent","filters","setFilters","actorDirector","year","genre","ratings","genresList","setGenresList","suggestedMovies","setSuggestedMovies","loading","setLoading","error","setError","currentUser","setCurrentUser","isCheckingAuth","setIsCheckingAuth","existingUser","getCurrentUser","fetchGenresList","length","fetchPopularMovies","response","fetch","data","json","genres","err","console","fetchFilteredMovies","actorDirectorId","trim","personResponse","encodeURIComponent","personData","results","id","genreId","genreObj","find","g","name","toLowerCase","params","URLSearchParams","append","url","toString","log","moviesWithGenres","map","movie","genre_ids","filter","Boolean","filteredMovies","ratingNum","parseFloat","isNaN","vote_average","moviesWithCredits","Promise","all","credits","fetchMovieCredits","_data$results$","title","movieId","searchMovies","query","handleSearch","handleRecent","handleFilterChange","e","value","target","prev","filterMovies","moviesList","filtered","crew","directors","c","job","some","d","includes","release_date","startsWith","handleSuggestion","handleKeyDown","key","document","activeElement","toggleWishlist","isInWishlist","m","handleAuthSuccess","user","handleLogout","signOut","style","display","justifyContent","alignItems","height","children","className","raysOrigin","raysColor","raysSpeed","lightSpread","rayLength","followMouse","mouseInfluence","noiseAmount","distortion","onAuthSuccess","position","top","right","gap","zIndex","color","fontWeight","username","onClick","padding","borderRadius","background","border","cursor","fontSize","fontFamily","boxShadow","transition","transform","textTransform","letterSpacing","onMouseEnter","onMouseLeave","left","to","textDecoration","backdropFilter","width","text","flex","alpha","stroke","weight","italic","textColor","strokeColor","minFontSize","marginTop","type","placeholder","onChange","onKeyDown","autoComplete","path","element","htmlFor","min","max","step"],"sources":["/Users/apple/Desktop/MovieZone/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Routes, Route, Link } from \"react-router-dom\";\nimport LightRays from \"./LightRays\";\nimport \"./App.css\";\nimport MovieTemplate from \"./MovieTemplate\";\nimport WishlistPage from \"./WishlistPage\";\nimport MovieDetailPage from \"./MovieDetailPage\"; // Import the new component\nimport Auth from \"./components/Auth\";\nimport { authService } from \"./services/authService\";\nimport TextPressure from \"./TextPressure\";\n\nconst TMDB_API_KEY = \"397abbabeb0c47f060cf654d072c0c15\";\nconst TMDB_BASE_URL = \"https://api.themoviedb.org/3\";\n\nconst App = () => {\n  const [wishlist, setWishlist] = useState([]);\n  const [movies, setMovies] = useState([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showRecent, setShowRecent] = useState(false);\n  const [filters, setFilters] = useState({\n    actorDirector: \"\",\n    year: \"\",\n    genre: \"\",\n    ratings: \"\",\n  });\n  const [genresList, setGenresList] = useState([]);\n  const [suggestedMovies, setSuggestedMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const [currentUser, setCurrentUser] = useState(null);\n  const [isCheckingAuth, setIsCheckingAuth] = useState(true);\n\n  // Check authentication status on mount\n  useEffect(() => {\n    const existingUser = authService.getCurrentUser();\n    setCurrentUser(existingUser);\n    setIsCheckingAuth(false);\n  }, []);\n\n  // Fetch genres list first, then popular movies\n  useEffect(() => {\n    fetchGenresList();\n  }, []);\n\n  // Fetch popular movies when genres are loaded\n  useEffect(() => {\n    if (genresList.length > 0) {\n      fetchPopularMovies();\n    }\n  }, [genresList]);\n\n  useEffect(() => {\n    if (showRecent && genresList.length > 0) {\n      fetchPopularMovies();\n    }\n  }, [showRecent]);\n\n  // Fetch genres list from TMDB\n  const fetchGenresList = async () => {\n    try {\n      const response = await fetch(\n        `${TMDB_BASE_URL}/genre/movie/list?api_key=${TMDB_API_KEY}&language=en-US`\n      );\n      const data = await response.json();\n      if (data.genres) {\n        setGenresList(data.genres);\n      }\n    } catch (err) {\n      console.error(\"Error fetching genres list:\", err);\n    }\n  };\n\n  // Fetch movies filtered by server-side filters\n  const fetchFilteredMovies = async (filters) => {\n    setLoading(true);\n    setError(null);\n    try {\n      let actorDirectorId = null;\n      if (filters.actorDirector.trim() !== \"\") {\n        // Search person by name to get ID\n        const personResponse = await fetch(\n          `${TMDB_BASE_URL}/search/person?api_key=${TMDB_API_KEY}&language=en-US&query=${encodeURIComponent(\n            filters.actorDirector.trim()\n          )}&page=1&include_adult=false`\n        );\n        const personData = await personResponse.json();\n        if (personData.results && personData.results.length > 0) {\n          actorDirectorId = personData.results[0].id;\n        } else {\n          setError(\"No actor/director found with that name.\");\n          setSuggestedMovies([]);\n          setLoading(false);\n          return;\n        }\n      }\n\n      // Map genre name to genre ID\n      let genreId = null;\n      if (filters.genre.trim() !== \"\") {\n        const genreObj = genresList.find(\n          (g) => g.name.toLowerCase() === filters.genre.trim().toLowerCase()\n        );\n        if (genreObj) {\n          genreId = genreObj.id;\n        } else {\n          setError(\"Genre not found.\");\n          setSuggestedMovies([]);\n          setLoading(false);\n          return;\n        }\n      }\n\n      // Build query parameters\n      const params = new URLSearchParams();\n      params.append(\"api_key\", TMDB_API_KEY);\n      params.append(\"language\", \"en-US\");\n      params.append(\"page\", \"1\");\n      if (filters.year.trim() !== \"\") {\n        params.append(\"primary_release_year\", filters.year.trim());\n      }\n      if (genreId) {\n        params.append(\"with_genres\", genreId);\n      }\n      if (actorDirectorId) {\n        params.append(\"with_cast\", actorDirectorId);\n      }\n\n      // Fetch movies with filters\n      const url = `${TMDB_BASE_URL}/discover/movie?${params.toString()}`;\n      console.log(\"Fetching movies with URL:\", url);\n      const response = await fetch(url);\n      const data = await response.json();\n      console.log(\"Filtered movies response:\", data);\n\n      if (data.results) {\n        // Map genre_ids to genres array with names\n        const moviesWithGenres = data.results.map((movie) => {\n          if (movie.genre_ids && genresList.length > 0) {\n            const genres = movie.genre_ids\n              .map((id) => genresList.find((g) => g.id === id))\n              .filter(Boolean);\n            return { ...movie, genres };\n          }\n          return movie;\n        });\n\n        // Filter by ratings client-side if needed\n        let filteredMovies = moviesWithGenres;\n        if (filters.ratings.trim() !== \"\") {\n          const ratingNum = parseFloat(filters.ratings);\n          if (!isNaN(ratingNum)) {\n            filteredMovies = filteredMovies.filter(\n              (movie) => movie.vote_average && movie.vote_average >= ratingNum\n            );\n          }\n        }\n\n        // Fetch credits for each movie to get director info\n        const moviesWithCredits = await Promise.all(\n          filteredMovies.map(async (movie) => {\n            const credits = await fetchMovieCredits(movie.id);\n            return { ...movie, credits };\n          })\n        );\n\n        setSuggestedMovies(moviesWithCredits);\n      } else {\n        setError(\"No movies found with the given filters.\");\n        setSuggestedMovies([]);\n      }\n    } catch (err) {\n      console.error(\"Error fetching filtered movies:\", err);\n      setError(\"Error fetching filtered movies.\");\n      setSuggestedMovies([]);\n    }\n    setLoading(false);\n  };\n\n  // Fetch popular movies from TMDB\n  const fetchPopularMovies = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      console.log('Fetching popular movies with genres list:', genresList.length);\n      const response = await fetch(\n        `${TMDB_BASE_URL}/movie/popular?api_key=${TMDB_API_KEY}&language=en-US&page=1`\n      );\n      const data = await response.json();\n      if (data.results) {\n        console.log('First movie genre_ids:', data.results[0]?.genre_ids);\n        // Map genre_ids to genres array with names\n        const moviesWithGenres = data.results.map((movie) => {\n          if (movie.genre_ids && genresList.length > 0) {\n            const genres = movie.genre_ids\n              .map((id) => genresList.find((g) => g.id === id))\n              .filter(Boolean);\n            console.log(`Movie ${movie.title} genres:`, genres);\n            return { ...movie, genres };\n          }\n          console.log(`Movie ${movie.title} - no genres mapped`);\n          return movie;\n        });\n        // Fetch credits for each movie to get director info\n        const moviesWithCredits = await Promise.all(\n          moviesWithGenres.map(async (movie) => {\n            const credits = await fetchMovieCredits(movie.id);\n            return { ...movie, credits };\n          })\n        );\n        setMovies(moviesWithCredits);\n        setSuggestedMovies(moviesWithCredits);\n      } else {\n        setError(\"Failed to fetch popular movies.\");\n      }\n    } catch (err) {\n      setError(\"Error fetching popular movies.\");\n    }\n    setLoading(false);\n  };\n\n  // Fetch movie credits (cast and crew) by movie ID\n  const fetchMovieCredits = async (movieId) => {\n    try {\n      const response = await fetch(\n        `${TMDB_BASE_URL}/movie/${movieId}/credits?api_key=${TMDB_API_KEY}`\n      );\n      const data = await response.json();\n      return data;\n    } catch {\n      return null;\n    }\n  };\n\n  // Search movies by name using TMDB search API\n  const searchMovies = async (query) => {\n    if (!query) {\n      setSuggestedMovies([]);\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\n        `${TMDB_BASE_URL}/search/movie?api_key=${TMDB_API_KEY}&language=en-US&query=${encodeURIComponent(\n          query\n        )}&page=1&include_adult=false`\n      );\n      const data = await response.json();\n      if (data.results) {\n        // Map genre_ids to genres array with names\n        const moviesWithGenres = data.results.map((movie) => {\n          if (movie.genre_ids && genresList.length > 0) {\n            const genres = movie.genre_ids\n              .map((id) => genresList.find((g) => g.id === id))\n              .filter(Boolean);\n            return { ...movie, genres };\n          }\n          return movie;\n        });\n        // Fetch credits for each movie\n        const moviesWithCredits = await Promise.all(\n          moviesWithGenres.map(async (movie) => {\n            const credits = await fetchMovieCredits(movie.id);\n            return { ...movie, credits };\n          })\n        );\n        setSuggestedMovies(moviesWithCredits);\n      } else {\n        setError(\"No movies found.\");\n        setSuggestedMovies([]);\n      }\n    } catch (err) {\n      setError(\"Error searching movies.\");\n      setSuggestedMovies([]);\n    }\n    setLoading(false);\n  };\n\n  // Handle search by movie name\n  const handleSearch = () => {\n    setShowRecent(false);\n    searchMovies(searchQuery);\n  };\n\n  // Handle Recent button toggle\n  const handleRecent = () => {\n    setSearchQuery(\"\");\n    setFilters({\n      actorDirector: \"\",\n      year: \"\",\n      genre: \"\",\n      ratings: \"\",\n    });\n    setShowRecent(true);\n  };\n\n  // Handle input change for filters\n  const handleFilterChange = (e) => {\n    const { name, value } = e.target;\n    console.log(`Filter input changed: ${name} = ${value}`);\n    setFilters((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  // Filter movies based on filters locally (since TMDB API does not support all filters directly)\n  const filterMovies = (moviesList) => {\n    let filtered = moviesList;\n\n    if (filters.actorDirector.trim() !== \"\") {\n      filtered = filtered.filter((movie) => {\n        if (!movie.credits || !movie.credits.crew) return false;\n        const directors = movie.credits.crew.filter((c) => c.job === \"Director\");\n        return directors.some((d) =>\n          d.name.toLowerCase().includes(filters.actorDirector.toLowerCase())\n        );\n      });\n    }\n\n    if (filters.year.trim() !== \"\") {\n      filtered = filtered.filter((movie) => {\n        if (!movie.release_date) return false;\n        return movie.release_date.startsWith(filters.year);\n      });\n    }\n\n    if (filters.genre.trim() !== \"\") {\n      filtered = filtered.filter((movie) => {\n        if (!movie.genre_ids && !movie.genres) {\n          // fallback to genres array if available\n          if (movie.genres) {\n            return movie.genres.some((g) =>\n              g.name.toLowerCase().includes(filters.genre.toLowerCase())\n            );\n          }\n          return false;\n        }\n        // genre_ids filtering is limited without genre mapping, so fallback to genres if available\n        return false;\n      });\n    }\n\n    if (filters.ratings.trim() !== \"\") {\n      const ratingNum = parseFloat(filters.ratings);\n      if (!isNaN(ratingNum)) {\n        filtered = filtered.filter(\n          (movie) => movie.vote_average && movie.vote_average >= ratingNum\n        );\n      }\n    }\n\n    return filtered;\n  };\n\n  // Handle Give Suggestion button\n  const handleSuggestion = () => {\n    setShowRecent(false);\n    // Filter from the original movies list to avoid cumulative filtering\n    const filtered = filterMovies(movies);\n    setSuggestedMovies(filtered);\n  };\n\n  // Handle Enter key for search and suggestion inputs\n  const handleKeyDown = (e) => {\n    if (e.key === \"Enter\") {\n      if (document.activeElement.name === \"search\") {\n        handleSearch();\n      } else {\n        // Trigger server-side filtering on Enter in filter inputs\n        setShowRecent(false);\n        fetchFilteredMovies(filters);\n      }\n    }\n  };\n\n  // Toggle wishlist function\n  const toggleWishlist = (movie) => {\n    console.log(\"Toggling wishlist for movie:\", movie.title);\n    setWishlist((prev) => {\n      const isInWishlist = prev.some((m) => m.id === movie.id);\n      return isInWishlist ? prev.filter((m) => m.id !== movie.id) : [...prev, movie];\n    });\n  };\n\n  // Handle successful authentication\n  const handleAuthSuccess = (user) => {\n    setCurrentUser(user);\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    authService.signOut();\n    setCurrentUser(null);\n  };\n\n  // Show loading while checking authentication\n  if (isCheckingAuth) {\n    return (\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\n        <p>Loading...</p>\n      </div>\n    );\n  }\n\n  // Show Auth component if user is not authenticated\n  if (!currentUser) {\n    return (\n      <div className=\"app-container\">\n        <LightRays\n          raysOrigin=\"top-center\"\n          raysColor=\"#00ffff\"\n          raysSpeed={1.5}\n          lightSpread={0.8}\n          rayLength={1.2}\n          followMouse={true}\n          mouseInfluence={0.1}\n          noiseAmount={0.1}\n          distortion={0.05}\n          className=\"background-rays\"\n        />\n        <Auth onAuthSuccess={handleAuthSuccess} />\n      </div>\n    );\n  }\n\n  return (\n    <Router>\n      <div className=\"app-container\">\n        <LightRays\n          raysOrigin=\"top-center\"\n          raysColor=\"#00ffff\"\n          raysSpeed={1.5}\n          lightSpread={0.8}\n          rayLength={1.2}\n          followMouse={true}\n          mouseInfluence={0.1}\n          noiseAmount={0.1}\n          distortion={0.05}\n          className=\"background-rays\"\n        />\n        <header className=\"header\">\n          <nav className=\"nav-tabs\" style={{ justifyContent: 'flex-end' }}>\n            {/* Removed Home link */}\n          </nav>\n          {/* User info and logout button - positioned at top-right corner */}\n          <div style={{ \n            position: 'absolute', \n            top: '10px', \n            right: '10px', \n            display: 'flex', \n            alignItems: 'center', \n            gap: '15px',\n            zIndex: 1000\n          }}>\n            <span style={{ color: 'white', fontWeight: 'bold' }}>\n              Welcome, {currentUser.username}!\n            </span>\n            <button\n              onClick={handleLogout}\n              style={{ \n                padding: '10px 20px', \n                fontWeight: '600', \n                borderRadius: '8px', \n                background: 'linear-gradient(135deg, #00ffff, #0099cc)', \n                border: '1px solid #00ffff',\n                color: '#000000',\n                cursor: 'pointer',\n                fontSize: '14px',\n                fontFamily: 'Inter, system-ui, sans-serif',\n                boxShadow: '0 0 15px rgba(0, 255, 255, 0.4)',\n                transition: 'all 0.3s ease',\n                transform: 'translateY(0)',\n                textTransform: 'uppercase',\n                letterSpacing: '0.5px'\n              }}\n              onMouseEnter={(e) => {\n                e.target.style.transform = 'translateY(-2px)';\n                e.target.style.boxShadow = '0 0 25px rgba(0, 255, 255, 0.6)';\n                e.target.style.background = 'linear-gradient(135deg, #00cccc, #007799)';\n              }}\n              onMouseLeave={(e) => {\n                e.target.style.transform = 'translateY(0)';\n                e.target.style.boxShadow = '0 0 15px rgba(0, 255, 255, 0.4)';\n                e.target.style.background = 'linear-gradient(135deg, #00ffff, #0099cc)';\n              }}\n            >\n              🚪 Logout\n            </button>\n          </div>\n          <div style={{ position: 'absolute', top: '10px', left: '10px' }}>\n            <Link\n              to=\"/wishlist\"\n              style={{ \n                padding: '10px 20px', \n                fontWeight: '600', \n                borderRadius: '8px', \n                background: 'rgba(0, 255, 255, 0.1)', \n                border: '1px solid #00ffff', \n                color: '#00ffff',\n                textDecoration: 'none',\n                fontSize: '14px',\n                fontFamily: 'Inter, system-ui, sans-serif',\n                boxShadow: '0 0 15px rgba(0, 255, 255, 0.3)',\n                transition: 'all 0.3s ease',\n                transform: 'translateY(0)',\n                display: 'inline-flex',\n                alignItems: 'center',\n                gap: '6px',\n                textTransform: 'uppercase',\n                letterSpacing: '0.5px',\n                backdropFilter: 'blur(10px)'\n              }}\n              onMouseEnter={(e) => {\n                e.target.style.transform = 'translateY(-2px)';\n                e.target.style.boxShadow = '0 0 25px rgba(0, 255, 255, 0.5)';\n                e.target.style.background = 'rgba(0, 255, 255, 0.2)';\n              }}\n              onMouseLeave={(e) => {\n                e.target.style.transform = 'translateY(0)';\n                e.target.style.boxShadow = '0 0 15px rgba(0, 255, 255, 0.3)';\n                e.target.style.background = 'rgba(0, 255, 255, 0.1)';\n              }}\n            >\n              ❤️ Wishlist ({wishlist.length})\n            </Link>\n          </div>\n          {/* MovieZone Title */}\n          <div style={{\n            position: 'absolute',\n            top: '30px',\n            left: '50%',\n            transform: 'translateX(-50%)',\n            width: '400px',\n            height: '50px',\n            zIndex: 999\n          }}>\n            <TextPressure\n              text=\"MovieZone\"\n              flex={true}\n              alpha={false}\n              stroke={false}\n              width={true}\n              weight={true}\n              italic={true}\n              textColor=\"#ffffff\"\n              strokeColor=\"#ff0000\"\n              minFontSize={36}\n            />\n          </div>\n          <div className=\"search-container\" style={{ marginTop: '80px' }}>\n            <input\n              type=\"text\"\n              name=\"search\"\n              placeholder=\"Search by movie name...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              onKeyDown={handleKeyDown}\n              className=\"search-input\"\n              autoComplete=\"off\"\n            />\n          </div>\n        </header>\n        <main className=\"main-content\">\n          <Routes>\n            <Route\n              path=\"/\"\n              element={\n                <div>\n                  <div className=\"filters-container\">\n                    <div className=\"filter-item\">\n                      <label htmlFor=\"actorDirector\">Actor/Director:</label>\n                      <input\n                        type=\"text\"\n                        id=\"actorDirector\"\n                        name=\"actorDirector\"\n                        value={filters.actorDirector}\n                        onChange={handleFilterChange}\n                        onKeyDown={handleKeyDown}\n                        className=\"filter-input\"\n                      />\n                    </div>\n                    <div className=\"filter-item\">\n                      <label htmlFor=\"year\">Year:</label>\n                      <input\n                        type=\"number\"\n                        id=\"year\"\n                        name=\"year\"\n                        value={filters.year}\n                        onChange={handleFilterChange}\n                        onKeyDown={handleKeyDown}\n                        className=\"filter-input\"\n                      />\n                    </div>\n                    <div className=\"filter-item\">\n                      <label htmlFor=\"genre\">Genre:</label>\n                      <input\n                        type=\"text\"\n                        id=\"genre\"\n                        name=\"genre\"\n                        value={filters.genre}\n                        onChange={handleFilterChange}\n                        onKeyDown={handleKeyDown}\n                        className=\"filter-input\"\n                      />\n                    </div>\n                    <div className=\"filter-item\">\n                      <label htmlFor=\"ratings\">Ratings:</label>\n                      <input\n                        type=\"number\"\n                        id=\"ratings\"\n                        name=\"ratings\"\n                        min=\"1\"\n                        max=\"10\"\n                        step=\"0.1\"\n                        value={filters.ratings}\n                        onChange={handleFilterChange}\n                        onKeyDown={handleKeyDown}\n                        className=\"filter-input\"\n                      />\n                    </div>\n                    <button\n                      className=\"suggestion-button\"\n                      onClick={() => {\n                        setShowRecent(false);\n                        fetchFilteredMovies(filters);\n                      }}\n                    >\n                      Give Suggestion\n                    </button>\n                  </div>\n                  <div className=\"movies-display\">\n                    {loading ? (\n                      <p>Loading movies...</p>\n                    ) : error ? (\n                      <p className=\"error-message\">{error}</p>\n                    ) : suggestedMovies.length > 0 ? (\n                      suggestedMovies.map((movie) => (\n                        <MovieTemplate\n                          key={movie.id}\n                          movie={movie}\n                          wishlist={wishlist}\n                          toggleWishlist={toggleWishlist}\n                        />\n                      ))\n                    ) : (\n                      <p className=\"no-results\">No movies to display.</p>\n                    )}\n                  </div>\n                </div>\n              }\n            />\n            <Route\n              path=\"/wishlist\"\n              element={<WishlistPage wishlist={wishlist} toggleWishlist={toggleWishlist} />}\n            />\n            <Route path=\"/movie/:movieId\" element={<MovieDetailPage />} /> {/* New route for movie details */}\n            <Route path=\"/auth\" element={<Auth />} />\n          </Routes>\n        </main>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}