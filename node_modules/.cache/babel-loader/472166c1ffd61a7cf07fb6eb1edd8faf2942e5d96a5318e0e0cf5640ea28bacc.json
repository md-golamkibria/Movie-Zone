{"ast":null,"code":"// Simple hash function (in a real app, use proper bcrypt or similar)\nconst hashPassword = password => {\n  return btoa(password); // Base64 encoding (NOT secure for production)\n};\n\n// Helper functions to manage localStorage\nconst getUsers = () => {\n  try {\n    return JSON.parse(localStorage.getItem('movietime_users') || '[]');\n  } catch (error) {\n    console.error('Error parsing users from localStorage:', error);\n    return [];\n  }\n};\nconst saveUsers = users => {\n  try {\n    localStorage.setItem('movietime_users', JSON.stringify(users));\n  } catch (error) {\n    console.error('Error saving users to localStorage:', error);\n    throw new Error('Failed to save user data');\n  }\n};\nexport const authService = {\n  // Check if username is unique\n  isUsernameAvailable: username => {\n    if (!username || typeof username !== 'string') {\n      return false;\n    }\n    const users = getUsers();\n    return !users.find(user => user.username.toLowerCase() === username.toLowerCase());\n  },\n  // Sign up new user\n  signUp: (username, password) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // Simulate API delay\n        if (!username || !password) {\n          reject({\n            message: 'Username and password are required'\n          });\n          return;\n        }\n        if (typeof username !== 'string' || typeof password !== 'string') {\n          reject({\n            message: 'Username and password must be valid strings'\n          });\n          return;\n        }\n        if (username.trim().length < 3) {\n          reject({\n            message: 'Username must be at least 3 characters long'\n          });\n          return;\n        }\n        if (password.length < 6) {\n          reject({\n            message: 'Password must be at least 6 characters long'\n          });\n          return;\n        }\n        const trimmedUsername = username.trim();\n        if (!authService.isUsernameAvailable(trimmedUsername)) {\n          reject({\n            message: 'Username already exists'\n          });\n          return;\n        }\n        const users = getUsers();\n        const newUser = {\n          id: Date.now(),\n          username: trimmedUsername,\n          password: hashPassword(password),\n          createdAt: new Date().toISOString()\n        };\n        users.push(newUser);\n        saveUsers(users);\n        resolve({\n          success: true,\n          user: {\n            id: newUser.id,\n            username: newUser.username\n          },\n          message: 'Account created successfully'\n        });\n      }, 500);\n    });\n  },\n  // Sign in existing user\n  signIn: (username, password) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // Simulate API delay\n        if (!username || !password) {\n          reject({\n            message: 'Username and password are required'\n          });\n          return;\n        }\n        if (typeof username !== 'string' || typeof password !== 'string') {\n          reject({\n            message: 'Username and password must be valid strings'\n          });\n          return;\n        }\n        const trimmedUsername = username.trim();\n        const users = getUsers();\n        const user = users.find(user => user.username.toLowerCase() === trimmedUsername.toLowerCase() && user.password === hashPassword(password));\n        if (user) {\n          // Set current user session\n          localStorage.setItem('movietime_current_user', JSON.stringify({\n            id: user.id,\n            username: user.username\n          }));\n          resolve({\n            success: true,\n            user: {\n              id: user.id,\n              username: user.username\n            },\n            message: 'Signed in successfully'\n          });\n        } else {\n          reject({\n            message: 'Invalid username or password'\n          });\n        }\n      }, 500);\n    });\n  },\n  // Get current user session\n  getCurrentUser: () => {\n    try {\n      const currentUser = localStorage.getItem('movietime_current_user');\n      return currentUser ? JSON.parse(currentUser) : null;\n    } catch (error) {\n      console.error('Error parsing current user from localStorage:', error);\n      localStorage.removeItem('movietime_current_user');\n      return null;\n    }\n  },\n  // Sign out\n  signOut: () => {\n    localStorage.removeItem('movietime_current_user');\n  }\n};","map":{"version":3,"names":["hashPassword","password","btoa","getUsers","JSON","parse","localStorage","getItem","error","console","saveUsers","users","setItem","stringify","Error","authService","isUsernameAvailable","username","find","user","toLowerCase","signUp","Promise","resolve","reject","setTimeout","message","trim","length","trimmedUsername","newUser","id","Date","now","createdAt","toISOString","push","success","signIn","getCurrentUser","currentUser","removeItem","signOut"],"sources":["/Users/apple/Desktop/MovieZone/src/services/authService.js"],"sourcesContent":["// Simple hash function (in a real app, use proper bcrypt or similar)\nconst hashPassword = (password) => {\n  return btoa(password); // Base64 encoding (NOT secure for production)\n};\n\n// Helper functions to manage localStorage\nconst getUsers = () => {\n  try {\n    return JSON.parse(localStorage.getItem('movietime_users') || '[]');\n  } catch (error) {\n    console.error('Error parsing users from localStorage:', error);\n    return [];\n  }\n};\n\nconst saveUsers = (users) => {\n  try {\n    localStorage.setItem('movietime_users', JSON.stringify(users));\n  } catch (error) {\n    console.error('Error saving users to localStorage:', error);\n    throw new Error('Failed to save user data');\n  }\n};\n\nexport const authService = {\n  // Check if username is unique\n  isUsernameAvailable: (username) => {\n    if (!username || typeof username !== 'string') {\n      return false;\n    }\n    const users = getUsers();\n    return !users.find(user => user.username.toLowerCase() === username.toLowerCase());\n  },\n\n  // Sign up new user\n  signUp: (username, password) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => { // Simulate API delay\n        if (!username || !password) {\n          reject({ message: 'Username and password are required' });\n          return;\n        }\n\n        if (typeof username !== 'string' || typeof password !== 'string') {\n          reject({ message: 'Username and password must be valid strings' });\n          return;\n        }\n\n        if (username.trim().length < 3) {\n          reject({ message: 'Username must be at least 3 characters long' });\n          return;\n        }\n\n        if (password.length < 6) {\n          reject({ message: 'Password must be at least 6 characters long' });\n          return;\n        }\n\n        const trimmedUsername = username.trim();\n\n        if (!authService.isUsernameAvailable(trimmedUsername)) {\n          reject({ message: 'Username already exists' });\n          return;\n        }\n\n        const users = getUsers();\n        const newUser = {\n          id: Date.now(),\n          username: trimmedUsername,\n          password: hashPassword(password),\n          createdAt: new Date().toISOString()\n        };\n\n        users.push(newUser);\n        saveUsers(users);\n\n        resolve({ \n          success: true, \n          user: { id: newUser.id, username: newUser.username },\n          message: 'Account created successfully' \n        });\n      }, 500);\n    });\n  },\n\n  // Sign in existing user\n  signIn: (username, password) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => { // Simulate API delay\n        if (!username || !password) {\n          reject({ message: 'Username and password are required' });\n          return;\n        }\n\n        if (typeof username !== 'string' || typeof password !== 'string') {\n          reject({ message: 'Username and password must be valid strings' });\n          return;\n        }\n\n        const trimmedUsername = username.trim();\n\n        const users = getUsers();\n        const user = users.find(user => \n          user.username.toLowerCase() === trimmedUsername.toLowerCase() && \n          user.password === hashPassword(password)\n        );\n\n        if (user) {\n          // Set current user session\n          localStorage.setItem('movietime_current_user', JSON.stringify({\n            id: user.id,\n            username: user.username\n          }));\n\n          resolve({ \n            success: true, \n            user: { id: user.id, username: user.username },\n            message: 'Signed in successfully' \n          });\n        } else {\n          reject({ message: 'Invalid username or password' });\n        }\n      }, 500);\n    });\n  },\n\n  // Get current user session\n  getCurrentUser: () => {\n    try {\n      const currentUser = localStorage.getItem('movietime_current_user');\n      return currentUser ? JSON.parse(currentUser) : null;\n    } catch (error) {\n      console.error('Error parsing current user from localStorage:', error);\n      localStorage.removeItem('movietime_current_user');\n      return null;\n    }\n  },\n\n  // Sign out\n  signOut: () => {\n    localStorage.removeItem('movietime_current_user');\n  }\n};\n"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAIC,QAAQ,IAAK;EACjC,OAAOC,IAAI,CAACD,QAAQ,CAAC,CAAC,CAAC;AACzB,CAAC;;AAED;AACA,MAAME,QAAQ,GAAGA,CAAA,KAAM;EACrB,IAAI;IACF,OAAOC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,IAAI,IAAI,CAAC;EACpE,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;IAC9D,OAAO,EAAE;EACX;AACF,CAAC;AAED,MAAME,SAAS,GAAIC,KAAK,IAAK;EAC3B,IAAI;IACFL,YAAY,CAACM,OAAO,CAAC,iBAAiB,EAAER,IAAI,CAACS,SAAS,CAACF,KAAK,CAAC,CAAC;EAChE,CAAC,CAAC,OAAOH,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC3D,MAAM,IAAIM,KAAK,CAAC,0BAA0B,CAAC;EAC7C;AACF,CAAC;AAED,OAAO,MAAMC,WAAW,GAAG;EACzB;EACAC,mBAAmB,EAAGC,QAAQ,IAAK;IACjC,IAAI,CAACA,QAAQ,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;MAC7C,OAAO,KAAK;IACd;IACA,MAAMN,KAAK,GAAGR,QAAQ,CAAC,CAAC;IACxB,OAAO,CAACQ,KAAK,CAACO,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACF,QAAQ,CAACG,WAAW,CAAC,CAAC,KAAKH,QAAQ,CAACG,WAAW,CAAC,CAAC,CAAC;EACpF,CAAC;EAED;EACAC,MAAM,EAAEA,CAACJ,QAAQ,EAAEhB,QAAQ,KAAK;IAC9B,OAAO,IAAIqB,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtCC,UAAU,CAAC,MAAM;QAAE;QACjB,IAAI,CAACR,QAAQ,IAAI,CAAChB,QAAQ,EAAE;UAC1BuB,MAAM,CAAC;YAAEE,OAAO,EAAE;UAAqC,CAAC,CAAC;UACzD;QACF;QAEA,IAAI,OAAOT,QAAQ,KAAK,QAAQ,IAAI,OAAOhB,QAAQ,KAAK,QAAQ,EAAE;UAChEuB,MAAM,CAAC;YAAEE,OAAO,EAAE;UAA8C,CAAC,CAAC;UAClE;QACF;QAEA,IAAIT,QAAQ,CAACU,IAAI,CAAC,CAAC,CAACC,MAAM,GAAG,CAAC,EAAE;UAC9BJ,MAAM,CAAC;YAAEE,OAAO,EAAE;UAA8C,CAAC,CAAC;UAClE;QACF;QAEA,IAAIzB,QAAQ,CAAC2B,MAAM,GAAG,CAAC,EAAE;UACvBJ,MAAM,CAAC;YAAEE,OAAO,EAAE;UAA8C,CAAC,CAAC;UAClE;QACF;QAEA,MAAMG,eAAe,GAAGZ,QAAQ,CAACU,IAAI,CAAC,CAAC;QAEvC,IAAI,CAACZ,WAAW,CAACC,mBAAmB,CAACa,eAAe,CAAC,EAAE;UACrDL,MAAM,CAAC;YAAEE,OAAO,EAAE;UAA0B,CAAC,CAAC;UAC9C;QACF;QAEA,MAAMf,KAAK,GAAGR,QAAQ,CAAC,CAAC;QACxB,MAAM2B,OAAO,GAAG;UACdC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;UACdhB,QAAQ,EAAEY,eAAe;UACzB5B,QAAQ,EAAED,YAAY,CAACC,QAAQ,CAAC;UAChCiC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACG,WAAW,CAAC;QACpC,CAAC;QAEDxB,KAAK,CAACyB,IAAI,CAACN,OAAO,CAAC;QACnBpB,SAAS,CAACC,KAAK,CAAC;QAEhBY,OAAO,CAAC;UACNc,OAAO,EAAE,IAAI;UACblB,IAAI,EAAE;YAAEY,EAAE,EAAED,OAAO,CAACC,EAAE;YAAEd,QAAQ,EAAEa,OAAO,CAACb;UAAS,CAAC;UACpDS,OAAO,EAAE;QACX,CAAC,CAAC;MACJ,CAAC,EAAE,GAAG,CAAC;IACT,CAAC,CAAC;EACJ,CAAC;EAED;EACAY,MAAM,EAAEA,CAACrB,QAAQ,EAAEhB,QAAQ,KAAK;IAC9B,OAAO,IAAIqB,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtCC,UAAU,CAAC,MAAM;QAAE;QACjB,IAAI,CAACR,QAAQ,IAAI,CAAChB,QAAQ,EAAE;UAC1BuB,MAAM,CAAC;YAAEE,OAAO,EAAE;UAAqC,CAAC,CAAC;UACzD;QACF;QAEA,IAAI,OAAOT,QAAQ,KAAK,QAAQ,IAAI,OAAOhB,QAAQ,KAAK,QAAQ,EAAE;UAChEuB,MAAM,CAAC;YAAEE,OAAO,EAAE;UAA8C,CAAC,CAAC;UAClE;QACF;QAEA,MAAMG,eAAe,GAAGZ,QAAQ,CAACU,IAAI,CAAC,CAAC;QAEvC,MAAMhB,KAAK,GAAGR,QAAQ,CAAC,CAAC;QACxB,MAAMgB,IAAI,GAAGR,KAAK,CAACO,IAAI,CAACC,IAAI,IAC1BA,IAAI,CAACF,QAAQ,CAACG,WAAW,CAAC,CAAC,KAAKS,eAAe,CAACT,WAAW,CAAC,CAAC,IAC7DD,IAAI,CAAClB,QAAQ,KAAKD,YAAY,CAACC,QAAQ,CACzC,CAAC;QAED,IAAIkB,IAAI,EAAE;UACR;UACAb,YAAY,CAACM,OAAO,CAAC,wBAAwB,EAAER,IAAI,CAACS,SAAS,CAAC;YAC5DkB,EAAE,EAAEZ,IAAI,CAACY,EAAE;YACXd,QAAQ,EAAEE,IAAI,CAACF;UACjB,CAAC,CAAC,CAAC;UAEHM,OAAO,CAAC;YACNc,OAAO,EAAE,IAAI;YACblB,IAAI,EAAE;cAAEY,EAAE,EAAEZ,IAAI,CAACY,EAAE;cAAEd,QAAQ,EAAEE,IAAI,CAACF;YAAS,CAAC;YAC9CS,OAAO,EAAE;UACX,CAAC,CAAC;QACJ,CAAC,MAAM;UACLF,MAAM,CAAC;YAAEE,OAAO,EAAE;UAA+B,CAAC,CAAC;QACrD;MACF,CAAC,EAAE,GAAG,CAAC;IACT,CAAC,CAAC;EACJ,CAAC;EAED;EACAa,cAAc,EAAEA,CAAA,KAAM;IACpB,IAAI;MACF,MAAMC,WAAW,GAAGlC,YAAY,CAACC,OAAO,CAAC,wBAAwB,CAAC;MAClE,OAAOiC,WAAW,GAAGpC,IAAI,CAACC,KAAK,CAACmC,WAAW,CAAC,GAAG,IAAI;IACrD,CAAC,CAAC,OAAOhC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,+CAA+C,EAAEA,KAAK,CAAC;MACrEF,YAAY,CAACmC,UAAU,CAAC,wBAAwB,CAAC;MACjD,OAAO,IAAI;IACb;EACF,CAAC;EAED;EACAC,OAAO,EAAEA,CAAA,KAAM;IACbpC,YAAY,CAACmC,UAAU,CAAC,wBAAwB,CAAC;EACnD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}