{"ast":null,"code":"import { Mesh } from '../../core/Mesh.js';\nimport { Program } from '../../core/Program.js';\nimport { Geometry } from '../../core/Geometry.js';\nimport { Vec3 } from '../../math/Vec3.js';\nimport { Mat3 } from '../../math/Mat3.js';\nconst vA = /* @__PURE__ */new Vec3();\nconst vB = /* @__PURE__ */new Vec3();\nconst vC = /* @__PURE__ */new Vec3();\nconst vCenter = /* @__PURE__ */new Vec3();\nconst vNormal = /* @__PURE__ */new Vec3();\nexport class FaceNormalsHelper extends Mesh {\n  constructor(object) {\n    let {\n      size = 0.1,\n      color = new Vec3(0.15, 0.86, 0.86),\n      ...meshProps\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const gl = object.gl;\n    const positionData = object.geometry.attributes.position.data;\n    const sizeData = new Float32Array([0, size]);\n    const indexAttr = object.geometry.attributes.index;\n    const getIndex = indexAttr ? i => indexAttr.data[i] : i => i;\n    const numVertices = indexAttr ? indexAttr.data.length : Math.floor(positionData.length / 3);\n    const nNormals = Math.floor(numVertices / 3);\n    const positionsArray = new Float32Array(nNormals * 2 * 3);\n    const normalsArray = new Float32Array(nNormals * 2 * 3);\n    const sizeArray = new Float32Array(nNormals * 2);\n    for (let i = 0; i < numVertices; i += 3) {\n      vA.fromArray(positionData, getIndex(i + 0) * 3);\n      vB.fromArray(positionData, getIndex(i + 1) * 3);\n      vC.fromArray(positionData, getIndex(i + 2) * 3);\n      vCenter.add(vA, vB).add(vC).multiply(1 / 3);\n      vA.sub(vA, vB);\n      vC.sub(vC, vB);\n      vNormal.cross(vC, vA).normalize();\n\n      // duplicate position and normal for line start and end point\n      const i2 = i * 2;\n      positionsArray.set(vCenter, i2);\n      positionsArray.set(vCenter, i2 + 3);\n      normalsArray.set(vNormal, i2);\n      normalsArray.set(vNormal, i2 + 3);\n      sizeArray.set(sizeData, i / 3 * 2);\n    }\n    const geometry = new Geometry(gl, {\n      position: {\n        size: 3,\n        data: positionsArray\n      },\n      normal: {\n        size: 3,\n        data: normalsArray\n      },\n      size: {\n        size: 1,\n        data: sizeArray\n      }\n    });\n    const program = new Program(gl, {\n      vertex,\n      fragment,\n      uniforms: {\n        color: {\n          value: color\n        },\n        worldNormalMatrix: {\n          value: new Mat3()\n        },\n        objectWorldMatrix: {\n          value: object.worldMatrix\n        }\n      }\n    });\n    super(gl, {\n      ...meshProps,\n      mode: gl.LINES,\n      geometry,\n      program\n    });\n    this.object = object;\n  }\n  draw(arg) {\n    this.program.uniforms.worldNormalMatrix.value.getNormalMatrix(this.object.worldMatrix);\n    super.draw(arg);\n  }\n}\nconst vertex = /* glsl */`\nattribute vec3 position;\nattribute vec3 normal;\nattribute float size;\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 objectWorldMatrix;\nuniform mat3 worldNormalMatrix;\n\nvoid main() {\n    vec3 n = normalize(worldNormalMatrix * normal) * size;\n    vec3 p = (objectWorldMatrix * vec4(position, 1.0)).xyz;\n    gl_Position = projectionMatrix * viewMatrix * vec4(p + n, 1.0);\n}\n`;\nconst fragment = /* glsl */`\nprecision highp float;\nuniform vec3 color;\n\nvoid main() {    \n    gl_FragColor = vec4(color, 1.0);\n}\n`;","map":{"version":3,"names":["Mesh","Program","Geometry","Vec3","Mat3","vA","vB","vC","vCenter","vNormal","FaceNormalsHelper","constructor","object","size","color","meshProps","arguments","length","undefined","gl","positionData","geometry","attributes","position","data","sizeData","Float32Array","indexAttr","index","getIndex","i","numVertices","Math","floor","nNormals","positionsArray","normalsArray","sizeArray","fromArray","add","multiply","sub","cross","normalize","i2","set","normal","program","vertex","fragment","uniforms","value","worldNormalMatrix","objectWorldMatrix","worldMatrix","mode","LINES","draw","arg","getNormalMatrix"],"sources":["/Users/apple/Desktop/Movie_Zone/node_modules/ogl/src/extras/helpers/FaceNormalsHelper.js"],"sourcesContent":["import { Mesh } from '../../core/Mesh.js';\nimport { Program } from '../../core/Program.js';\nimport { Geometry } from '../../core/Geometry.js';\nimport { Vec3 } from '../../math/Vec3.js';\nimport { Mat3 } from '../../math/Mat3.js';\n\nconst vA = /* @__PURE__ */ new Vec3();\nconst vB = /* @__PURE__ */ new Vec3();\nconst vC = /* @__PURE__ */ new Vec3();\nconst vCenter = /* @__PURE__ */ new Vec3();\nconst vNormal = /* @__PURE__ */ new Vec3();\n\nexport class FaceNormalsHelper extends Mesh {\n    constructor(object, { size = 0.1, color = new Vec3(0.15, 0.86, 0.86), ...meshProps } = {}) {\n        const gl = object.gl;\n\n        const positionData = object.geometry.attributes.position.data;\n        const sizeData = new Float32Array([0, size]);\n\n        const indexAttr = object.geometry.attributes.index;\n        const getIndex = indexAttr ? (i) => indexAttr.data[i] : (i) => i;\n        const numVertices = indexAttr ? indexAttr.data.length : Math.floor(positionData.length / 3);\n\n        const nNormals = Math.floor(numVertices / 3);\n        const positionsArray = new Float32Array(nNormals * 2 * 3);\n        const normalsArray = new Float32Array(nNormals * 2 * 3);\n        const sizeArray = new Float32Array(nNormals * 2);\n\n        for (let i = 0; i < numVertices; i += 3) {\n            vA.fromArray(positionData, getIndex(i + 0) * 3);\n            vB.fromArray(positionData, getIndex(i + 1) * 3);\n            vC.fromArray(positionData, getIndex(i + 2) * 3);\n\n            vCenter\n                .add(vA, vB)\n                .add(vC)\n                .multiply(1 / 3);\n\n            vA.sub(vA, vB);\n            vC.sub(vC, vB);\n            vNormal.cross(vC, vA).normalize();\n\n            // duplicate position and normal for line start and end point\n            const i2 = i * 2;\n            positionsArray.set(vCenter, i2);\n            positionsArray.set(vCenter, i2 + 3);\n\n            normalsArray.set(vNormal, i2);\n            normalsArray.set(vNormal, i2 + 3);\n            sizeArray.set(sizeData, (i / 3) * 2);\n        }\n\n        const geometry = new Geometry(gl, {\n            position: { size: 3, data: positionsArray },\n            normal: { size: 3, data: normalsArray },\n            size: { size: 1, data: sizeArray },\n        });\n\n        const program = new Program(gl, {\n            vertex,\n            fragment,\n            uniforms: {\n                color: { value: color },\n                worldNormalMatrix: { value: new Mat3() },\n                objectWorldMatrix: { value: object.worldMatrix },\n            },\n        });\n\n        super(gl, { ...meshProps, mode: gl.LINES, geometry, program });\n\n        this.object = object;\n    }\n\n    draw(arg) {\n        this.program.uniforms.worldNormalMatrix.value.getNormalMatrix(this.object.worldMatrix);\n        super.draw(arg);\n    }\n}\n\nconst vertex = /* glsl */ `\nattribute vec3 position;\nattribute vec3 normal;\nattribute float size;\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 objectWorldMatrix;\nuniform mat3 worldNormalMatrix;\n\nvoid main() {\n    vec3 n = normalize(worldNormalMatrix * normal) * size;\n    vec3 p = (objectWorldMatrix * vec4(position, 1.0)).xyz;\n    gl_Position = projectionMatrix * viewMatrix * vec4(p + n, 1.0);\n}\n`;\n\nconst fragment = /* glsl */ `\nprecision highp float;\nuniform vec3 color;\n\nvoid main() {    \n    gl_FragColor = vec4(color, 1.0);\n}\n`;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}